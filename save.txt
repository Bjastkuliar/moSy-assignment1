function setMessage (settings: object, message: string): object{
  let tmp = {...settings}
  settings.message = message
  return Object.freeze(tmp)
}

mainMenu()

/*starts the game by reading input and filtering 
if there are commands. Needed in order to handle 
each possible case of the input function*/
function mainMenu (settings : object = Object.freeze({...settingsTemplate})){
  console.log(settings)
  showMessage(settings.message)
  const i = input(`enter a number between 0 and ${answers.length}: `)
  processString(i, settings)
  if(settings.keepPlaying){
    mainMenu(settings)
  }
}

/*prints the message according to whether it is the
startup, the main menu or in-game*/
function showMessage(message : string, inGame : boolean = false){
  console.clear()
  if(message === ''){
    console.log('Welcome!\n')
    console.log('Type HELP to list all the commands\nor type QUIT to quit.\nTo choose an answer ')
  } else {
    console.log(message+'\n')
    if(!inGame){
      console.log('Type HELP to list all the commands\nor type QUIT to quit.\nTo choose an answer ')
    }
  }
}

/*Processes the input, by sorting it between words, commands or numbers. If it does not fall within these categories it is treated as invalid input*/
function processString(input: string, settings: object, game: object|undefined){
  switch(input.length){
      //should be a grid input
    case 5:{
      if(game!=='undefined'){
        processWord(input, settings, game)
      } else {
          settings = setMessage(settings,'Game has not started yet!\nEnter a number to start a game.')
      }
      break
    }
      //should be a command
    case 4:{
      processCommand(input, settings)
      break
    }
      //should be a number
    case 1:{
      processNumber(input, settings)
      break
    }
      //the rest is invalid
    default:{
      settings = setMessage(settings,'Invalid input please try again!')
      break
    }
  }
}

/*inserts the word in the game-grid if the
game has started and it is valid, otherwise sends a warning.*/
function processWord(input: string, settings: object, game : object) {
  if(words.includes(input)){
      fillGrid(input)
    } else {
      settings = setMessage(settings,'Word does not figure among those valid!')
    }
}

/*process any given word in instructions,
provided that it is valid. Otherwise returns
an invalid input message*/
function processCommand(input: string) {
  inGame = false
  switch(input){
      case "QUIT":{
        keepPlaying = false
        console.clear()
        break
      }
        //both cases either switch the mode or do nothing
      case "EASY": {
        if(hardMode){
          message = 'Hard mode disabled.'
          hardMode = false
        } else {
          message = 'Hard mode is already disabled!'
        }
        break
      }
      case "HARD": {
        if(!hardMode){
          message = 'Hard mode enabled.'
          hardMode = true
        } else {
          message = 'Hard mode is already enabled!'
        }
        break
      }
        //prints the command list
      case "HELP": {
        message = 'The available commands are:\n'+
          'HELP       shows this list\nEASY/HARD  switches between easy and hard mode'+'\nSTAT       prints the statistics\nQUIT       exits the game'
        break
      }
      case "STAT": {
        message = `Current statistics:\n\n${wins}  games won\n${losses}  games lost`
        break
      }
        default:{
          message = 'Invalid command, please try again!'
          break
        }  
    }
}

/*process any single character word,
provided that it is a number, 
if so starts a new game. Otherwise returns
an invalid input message*/
function processNumber(input: string) {
  let i: number = parseInt(input)
  if(isNaN(i)){
    message = 'Invalid input, please try again!'
  } else {
    inGame = true
    answer = answers[i]
    newGame()
  }
}

/*Sets up the newly started game*/
function newGame(){
  game = new Array()
  round = 0
  let win: boolean = false 
  oneRound()
  if(win){
    wins++
  } else {
    losses++
  }
  round = 0
  inGame = false
  input('wait')
}

/*runs one round of the game*/
function playRound(answer: string, round: number) {
  let word: string 
  switch(round){
    case 1:{
      round++
      message = 'Game has started!'
      showMessage()
      emptyGrid(game)
      word = input('Enter the first guess ')
      processString(word)
      break
    }
    case 6:{
      message = 'Last round!'
      showMessage()
      word = input('Enter your last guess ')
      processString(word)
      round++
      break
    }
    default:{
      showMessage()
      word = input('Enter the next guess ')
      processString(word)
      round++
      break
    }
  }
  if(round < 7){
    console.log('Round number '+round)
    input('wait')
    playRound(answer,round)
  }
  //show table
  //show keyboard
  //await input
  //validate input
}

function oneRound() {
  round++
  if(round === 1){
    message = 'Game has started!'
  }
  showMessage()
  printGrid()
  word = input('Enter the first guess ')
  processString(word)
  if(!words.includes(word)){
    message = 'wrong word'
    oneRound()
  }
  console.log(game)
}

function fillGrid(word: string) {
  const wordArray: string[] = Array.from(word)
  game[round-1]= wordArray
  printGrid()
}

function emptyGrid(grid: string[][]) {
  let view: string = rowSeparator+'\n'
  for (let index = 0; index < grid.length; index++) {
    view = view + rowEmpty+'\n' + rowSeparator+'\n'
  }
  console.log(view)
}

/*converts any provided array of strings into the
printable table format*/
function convertRow(gameRow : string[]): string {
  if(typeof gameRow !== 'undefined'){
    let gridRow: string = "| "
  for (let index = 0; index < gameRow.length; index++) {
    gridRow = gridRow + gameRow[index]+ " | "
  }
    return gridRow + '\n' + rowSeparator + '\n'
  } else {
    return rowEmpty + '\n' + rowSeparator + '\n'
  }
}

function printGrid() {
  let view: string = rowSeparator+'\n'
  for (let index = 0; index < 6; index++) {
    view = view + convertRow(game[index])
  }
  console.log(view)
}