{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["// these are the two libraries we need\nimport prompt from 'prompt-sync'\nimport {readFileSync} from 'fs'\n\n// these are some codes to get the console to print in colors\n// see examples below\nconst Reset = \"\\x1b[0m\"\nconst BgRed = \"\\x1b[41m\"\nconst BgGreen = \"\\x1b[42m\"\nconst BgYellow = \"\\x1b[43m\"\nconst BgBlue = \"\\x1b[44m\"\nconst BgMagenta = \"\\x1b[45m\"\nconst BgCyan = \"\\x1b[46m\"\nconst BgWhite = \"\\x1b[47m\"\n\nconst input = prompt();\n\n// this is how to read data from the files\nconst answers:string[] = readFileSync('answers.txt', 'utf-8').split(\"\\n\")\nconst words: string[] = readFileSync('allwords.txt', 'utf-8').split(\"\\n\")\n\nconst rowSeparator: string = '|---|---|---|---|---|'\nconst rowEmpty: string = '|   |   |   |   |   |'\nconst keyboardSeparator = '|---|---|---|---|---|---|---|---|---|---|'\nconst keyboard = [['Q','W','E','R','T','Y','U','I','O','P'],['A','S','D','F','G','H','J','K','L'],['Z','X','C','V','B','N','M']]\nlet keyboardColour = [...keyboard]\n\n\nlet message : string|undefined\nlet answer: string[]\nlet hardMode: boolean = false\nlet keepPlaying: boolean = true\nlet inGame: boolean = false\nlet round: number = 0\nlet wins: number = 0\nlet losses: number = 0\nlet game: string[][] = new Array(6)\n\n//Step 1: User chooses answer (not known) --> random?\n//Step 2: Setup game\n//Step 3: Play\n//Step 4: Win/Loss, add to stats\n\nmenu()\n\n/*responsible of running the main menu*/\nfunction menu(){\n  while(keepPlaying){\n    showMessage()\n    const i = input(`enter a number between 0 and ${answers.length}: `)\n    processString(i)\n  }  \n}\n\n/*prints the message according to whether it is the\nstartup, the main menu or in-game, cases are sorted according to their usage*/\nfunction showMessage(){\n  //console.clear()\n  if(typeof message !== 'undefined'){\n     console.log(message+'\\n')\n    if(!inGame){\n      console.log('Type HELP to list all the commands\\nor type QUIT to quit.\\nTo choose an answer ')\n    }\n  } else {\n    console.log('Welcome!\\n')\n    console.log('Type HELP to list all the commands\\nor type QUIT to quit.\\nTo choose an answer ')\n  }\n}\n\n/*Processes the input, by sorting it between words, commands or numbers. If it does not fall within these categories it is treated as invalid input*/\nfunction processString(input: string){\n  switch(input.length){\n      //should be a grid input\n    case 5:{\n      processWord(input)\n      break\n    }\n      //should be a command\n    case 4:{\n      processCommand(input)\n      break\n    }\n      //should be a number\n    case 1:{\n      processNumber(input)\n      break\n    }\n      //the rest is invalid\n    default:{\n      message = 'Invalid input, please try again!'\n      break\n    }\n  }\n}\n\n/*process any given word in instructions,\nprovided that it is valid. Otherwise returns\nan invalid input message*/\nfunction processCommand(input: string) {\n  inGame = false\n  switch(input){\n      case \"QUIT\":{\n        keepPlaying = false\n        console.clear()\n        break\n      }\n        //both cases either switch the mode or do nothing\n      case \"EASY\": {\n        if(hardMode){\n          message = 'Hard mode disabled.'\n          hardMode = false\n        } else {\n          message = 'Hard mode is already disabled!'\n        }\n        break\n      }\n      case \"HARD\": {\n        if(!hardMode){\n          message = 'Hard mode enabled.'\n          hardMode = true\n        } else {\n          message = 'Hard mode is already enabled!'\n        }\n        break\n      }\n        //prints the command list\n      case \"HELP\": {\n        message = 'The available commands are:\\n'+\n          'HELP       shows this list\\nEASY/HARD  switches between easy and hard mode'+'\\nSTAT       prints the statistics\\nQUIT       exits the game'\n        break\n      }\n      case \"STAT\": {\n        message = `Current statistics:\\n\\n${wins}  games won\\n${losses}  games lost`\n        break\n      }\n        default:{\n          message = 'Invalid command, please try again!'\n          break\n        }  \n    }\n}\n\n/*process any single character word,\nprovided that it is a number, \nif so starts a new game. Otherwise returns\nan invalid input message*/\nfunction processNumber(input: string) {\n  let i: number = parseInt(input)\n  if(isNaN(i)){\n    message = 'Invalid input, please try again!'\n  } else {\n    answer = Array.from(answers[i])\n    newGame()\n  }\n}\n\n/*inserts the word in the game-grid if the\ngame has started and it is valid, otherwise sends a warning.*/\nfunction processWord(input: string) {\n  if(inGame){\n      if(words.includes(input)){\n        fillGame(input)\n      } else {\n        message = 'Word does not figure among those valid!'\n      }\n  } else {\n    message = 'Game has not started yet!\\nEnter a number to start a game.'\n  }\n}\n\n/*starts a new game*/\nfunction newGame(){\n  inGame = true\n  round = 0\n  let win: boolean = false \n  playRound()//let win = playRound()\n  endGame(win)\n}\n\n/*Performs the closing operations of a game,\nnamely update statistics and reset the variables*/\nfunction endGame(result: boolean) {\n  message = 'Game has ended!'\n  if(result){\n    message+='\\nYou Won!'\n    wins++\n  } else {\n    message+='\\nYou Lost!'\n    losses++\n  }  \n  showMessage()\n  showGrid()\n  input('Press enter to continue')\n  inGame = false\n  round = 0\n  game = new Array()\n  message = undefined\n  menu()\n}\n\n/*runs one round of the game*/\nfunction playRound() {\n  let word: string \n  switch(round){\n    case 0:{\n      message = 'New game has started!'\n      showMessage()\n      showGrid()\n      showKeyboard()\n      word = input('Enter the first guess ')\n      processString(word)\n      break\n    }\n    case 5:{\n      message = 'Last round!'\n      showMessage()\n      showGrid()\n      word = input('Enter your last guess ')\n      processString(word)\n      break\n    }\n    default:{\n      message = 'Round '+round\n      showMessage()\n      showGrid()\n      word = input('Enter the next guess ')\n      processString(word)\n      break\n    }\n  }\n  if(round < 6 && keepPlaying !== false){\n    playRound()\n  }\n  //show table\n  //show keyboard\n  //await input\n  //validate input\n}\n\nfunction fillGame(word: string) {\n  const wordArray: string[] = Array.from(word)\n  //printStats()\n  game[round]= wordArray\n  console.log(game)\n  round++\n}\n\nfunction showGrid() {\n  let view: string = rowSeparator+'\\n'\n  for (let idx = 0; idx < game.length; idx++) {\n    if(typeof game[idx] !== 'undefined'){\n      view = view + convertRow(game[idx])\n    } else {\n      view = view + rowEmpty+'\\n'+rowSeparator+'\\n'\n    }\n  }\n  console.log(view)\n}\n\n/*converts any provided array of strings into the\nprintable table format*/\nfunction convertRow(gameRow : string[]): string {\n  if(typeof gameRow !== 'undefined'){\n    let gridRow: string = \"| \"\n  for (let idx = 0; idx < gameRow.length; idx++) {\n    gridRow = gridRow + gameRow[idx]+ \" | \"\n  }\n    return gridRow\n  } else {\n    return rowEmpty\n  }\n}\n\nfunction printStats() {\n  console.log('inGame '+inGame+'\\nkeepPlaying '+keepPlaying+'\\nround '+round+'\\ngame '+game+\n             '\\ngame length '+game.length)\n}\n\n/*Converts the two-dimensional game array to\na formatted string table*/\nfunction printGrid() {\n  let view: string = rowSeparator+'\\n'\n  for (let idx = 0; idx < 6; idx++) {\n    view = view + convertRow(game[idx])+'\\n'+rowSeparator+'\\n'\n  }\n  console.log(view)\n}\n\nfunction showKeyboard() {\n  let keyGrid: string = keyboardSeparator+'\\n'\n  for(let idx = 0; idx<keyboard.length;idx++){\n    keyGrid+=printKeyboard(idx)\n  }\n  console.log(keyGrid)\n}\n\nfunction printKeyboard(index:number):string{\n  switch(index){\n    case 0:{\n      return convertRow(keyboardColour[index])+'\\n'+ keyboardSeparator+'\\n'\n    }\n    case 1:{\n      return convertRow(keyboardColour[index])+'  |'+'\\n'+ keyboardSeparator+'\\n'\n    }\n    case 2:{\n      return '|   '+ convertRow(keyboardColour[index])+        '  |   |'+'\\n'+ keyboardSeparator+'\\n'\n    }\n  }\n}"],
  "mappings": "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",
  "names": []
}
