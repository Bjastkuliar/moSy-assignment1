{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["// these are the two libraries we need\nimport prompt from 'prompt-sync'\nimport {readFileSync} from 'fs'\n\n// these are some codes to get the console to print in colors\n// see examples below\nconst reset = \"\\x1b[0m\"\nconst red = \"\\x1b[41m\"\nconst green = \"\\x1b[42m\"\nconst yellow = \"\\x1b[43m\"\n\nconst input = prompt();\n\n// this is how to read data from the files\nconst answers:string[] = readFileSync('answers.txt', 'utf-8').split(\"\\n\")\nconst words: string[] = readFileSync('allwords.txt', 'utf-8').split(\"\\n\")\n\nconst rowSeparator: string = '|---|---|---|---|---|'\nconst keySeparator: string = '|---|---|---|---|---|---|---|---|---|---|'\nconst rowEmpty: string = '|   |   |   |   |   |'\n\nconst keys: string = 'QWERTYUIOPASDFGHJKLZXCVBNM'\n\ninterface Settings{\n  msg: string,\n  keepPlaying?: boolean,\n  wins?: number,\n  losses?: number,\n  hardMode?: boolean\n  }\n\ninterface Game{\n  msg?: string,\n  grid?: string[][],\n  keyboard?: string[][],\n  answer: string,\n  round: number,\n  win?: boolean,\n  inGame: boolean\n  checked?: string[],\n  partialAnswer?: string[]\n  }\n\ninterface scoredChar{\n    char: string,\n    score: number,\n    repeated?: boolean\n}\n\nmainMenu()\n\nfunction setMessage (settings: Settings, message: string): Settings{\n  let tmp = {...settings}\n  tmp.msg = message\n  return Object.freeze(tmp)\n}\n\n  function setGameMessage (settings: Game, message: string): Game{\n  let tmp = {...settings}\n  tmp.msg = message\n  return Object.freeze(tmp) \n}\n\nfunction setMode(settings: Settings, mode: boolean): Settings{\n  let tmp = {...settings}\n  tmp.hardMode = mode\n  return Object.freeze(tmp)\n}\n\nfunction playMore (settings: Settings, answer: boolean): Settings{\n  let tmp = {...settings}\n  tmp.keepPlaying = answer\n  return Object.freeze(tmp)\n}\n\n/*starts the game by reading input and filtering \nif there are commands. Needed in order to handle \neach possible case of the input function*/\nfunction mainMenu (settings : Settings = {\n  msg : 'Welcome', \n  keepPlaying : true,\n  wins: 0,\n  losses: 0\n} ){\n  while(settings.keepPlaying){\n    showMessage(settings.msg)\n    const i = input(`enter a number between 0 and ${answers.length}: `)\n    settings = processString(i, settings) as Settings\n  }\n}\n\n/*prints the message according to whether it is the\nstartup, the main menu or in-game*/\nfunction showMessage(message : string, inGame : boolean = false){\n  //console.clear()\n  console.log(message+'\\n')\n    if(!inGame){\n      console.log('Type HELP to list all the commands\\nor type QUIT to quit.\\nTo choose an answer ')\n    }\n}\n\n/*Processes the input, by sorting it between words, commands or numbers. If it does not fall within these categories it is treated as invalid input*/\nfunction processString(word: string, data: Settings|Game):Settings|Game{\n  switch(word.length){\n       /*this case can be accessed in 2 contexts, if we are in the main menu we need to signal an error, if we are in a game we have to validate the input word*/\n    case 5:{\n      word = word.toLowerCase()\n      //distinguish between game and settings\n      if(data.hasOwnProperty('answer')){\n        return validateWord(word, data as Game)\n      } else {\n        return setMessage(data as Settings,'Game has not started yet!\\nEnter a number to start a game.')\n      }\n    }\n    case 4:{\n      //it's a command\n      word = word.toUpperCase()\n      if(data.hasOwnProperty('answer')){\n        //we are in a game\n        //quit the game and reopen the main menu\n        if((data as Game).inGame){\n           return exitGame(data as Game) as Game\n         }\n      } else {\n        return processCommand(word,data as Settings)\n      }\n    }\n    case 1:{\n      //it's a number\n       if(data.hasOwnProperty('answer')){\n         if((data as Game).inGame ){\n           return exitGame(data as Game)\n         }\n        //we are in a game\n        //quit the game and reopen main menu\n      } else {\n        return processNumber(word,data as Settings)\n      }\n    }\n    default:{\n      return setMessage(data as Settings, 'Invalid input, please try again!')\n    }\n  }\n}\n\n\n/*process any given word in instructions,\nprovided that it is valid. Otherwise returns\nan invalid input message*/\nfunction processCommand(input: string, settings: Settings): Settings{\n  console.clear()\n  switch(input){\n      case \"QUIT\":{\n        console.clear()\n        return playMore(settings,false)\n      }\n        //both cases either switch the mode or do nothing\n      case \"EASY\": {\n        if(settings.hardMode){\n          settings = setMessage(settings,'Hard mode disabled!')\n          return setMode(settings, false)\n        } else {\n          return setMessage(settings,'Hard mode is already disabled!')\n        }\n      }\n      case \"HARD\": {\n        if(!settings.hardMode){\n          settings = setMessage(settings,'Hard mode enabled.')\n          return setMode(settings,true)\n        } else {\n          return setMessage(settings,'Hard mode is already enabled!')\n        }\n      }\n        //prints the command list\n      case \"HELP\": {\n        return setMessage(settings,'The available commands are:\\nHELP       shows this list\\nEASY/HARD  switches between easy and hard mode\\nSTAT       prints the statistics\\nQUIT       exits the game')\n      }\n      case \"STAT\": {\n        return setMessage(settings, `Current statistics:\\n\\n${settings.wins}  games won\\n${settings.losses}  games lost`)\n      }\n    default:{\n          return setMessage(settings, 'Invalid command, please try again!')\n      }  \n    }\n}\n\n/*process any single character word,\nprovided that it is a number, \nif so starts a new game. Otherwise returns\nan invalid input message*/\nfunction processNumber(word: string,settings: Settings):Settings{\n  let i: number = parseInt(word)\n  if(isNaN(i)){\n    return setMessage(settings,'Invalid input, please try again!')\n  } else {\n    let game: Game = {\n      answer : answers[i],\n      inGame: true,\n      round: 0\n    }\n    return newGame(settings,game)\n  }\n}\n\nfunction setWin(settings: Settings): Settings{\n  let tmp = {...settings}\n  if(typeof tmp.wins === 'undefined'){\n    tmp.wins = 1\n  } else {\n    tmp.wins++\n  }\n  return Object.freeze(tmp)\n}\n\nfunction setLoss(settings: Settings): Settings{\n  let tmp = {...settings}\n  if(typeof tmp.losses === 'undefined'){\n    tmp.losses = 1\n  } else {\n    tmp.losses++\n  }\n  return Object.freeze(tmp)\n}\n\nfunction exitGame(game: Game):Game {\n  let tmp: Game = {...game}\n  tmp.inGame = false\n  return Object.freeze(tmp)\n}\n\nfunction correctChars(game:Game, guess: string): Game{\n  let tmp = {...game}\n  if(typeof tmp.partialAnswer === 'undefined'){\n    tmp.partialAnswer = new Array()\n  }\n  for(let i = 0; i<guess.length; i++){\n    if(game.answer.includes(guess.charAt(i))){\n      if(tmp.partialAnswer.contains(guess.charAt(i))){\n        tmp.partialAnswer.push(guess.charAt(i))\n      }\n    }\n  }\n  return Object.freeze(tmp)\n}\n\nfunction newGame(settings: Settings, game: Game): Settings {\n  \n  game = fillGrid(game)\n  game = playGame(game)\n  if(typeof game.win !== 'undefined'){\n    if(game.win){\n      game = setGameMessage(game, 'You Won!')\n      settings = setMessage(settings, 'You Won!')\n      settings = setWin(settings)\n    } else {\n      settings = setMessage(settings, `You Lost! The answer was ${game.answer}`)\n      settings = setLoss(settings)\n      game = setGameMessage(game,`You Lost! The answer was ${game.answer}`)\n    }\n  } else {\n    game = setGameMessage(game,'Game exited!')\n    settings = setMessage(settings, `Game exited!`)\n  }\n  showMessage(game.msg as string)\n  printGrid(game.grid as string[][])\n  input('Press enter to get back to main menu')\n  return settings\n}\n\nfunction nextRound(game: Game):Game{\n  let tmp = {...game}\n  tmp.round++\n  return Object.freeze(tmp)\n}\n\nfunction updateKeyboard(game: Game, keyboard: string[][]):Game{\n  let tmp = {...game}\n  tmp.keyboard = keyboard\n  return Object.freeze(tmp)\n}\n\nfunction playGame(game : Game): Game{\n  showMessage(game.msg as string)\n  printGrid(game.grid as string[][])\n  game = printKeyboard(game)\n  console.log(`Round number: ${game.round}`)\n  let word = input('Enter your guess: ')\n  game = (processString(word, game)) as Game\n  if(word === game.answer){ //game is won\n    return win(game)\n  } else { //game is still not beaten\n    if(game.round<6){ //we still have rounds left\n      if(game.inGame){ //we are still playing\n        return playGame(game) //proceed with the next round\n      } else { //we are no longer playing\n        return game //user has inputted a number/command, exit the game\n      }\n    } else { //there are no rounds left\n      return lost(game) //game is lost\n    }\n  }\n}\n\nfunction lost(game: Game): Game{\n  let tmp = {...game}\n  tmp.win = false\n  return Object.freeze(tmp)\n}\n\n/*inserts the word in the game-grid if the\ngame has started and it is valid, otherwise sends a warning.*/\nfunction validateWord(word: string, game: Game): Game{\n  if(words.includes(word)){\n    game = nextRound(game)\n    game = fillGrid(game, word)\n    return paintWord(word, game)\n  } else {\n    return setGameMessage(game,`${word} does not figure among valid words!`)\n  }\n}\n\nfunction fillGrid(game: Game, word: string|undefined = undefined): Game{\n  let tmp = {...game}\n  if(typeof tmp.grid === 'undefined'){\n    tmp.grid = new Array(6).fill(undefined)\n  } else {\n    if(typeof word!== 'undefined'){\n      tmp.grid[tmp.round-1] = Array.from(word)\n    }\n  }\n  return Object.freeze(tmp)\n}\n\n/*converts any provided array of strings into the\nprintable table format*/\nfunction convertRow(gameRow : string[], separator: string): string {\n  if(typeof gameRow !== 'undefined'){\n    let gridRow: string = \"| \"\n    gameRow.map(element=> gridRow+=element+ \" | \")\n    return gridRow + '\\n' + separator + '\\n'\n  } else {\n    return rowEmpty + '\\n' + separator + '\\n'\n  }\n}\n\nfunction printGrid(grid: string[][]) {\n  let view: string = ''\n  if(grid.length === 3){ //is the keyboard\n    view+=keySeparator+'\\n'\n    grid.map(row=> view+=convertRow(row, keySeparator))\n  } else { //is the grid\n    view+=rowSeparator+'\\n'\n    grid.map(row=> view+=convertRow(row, rowSeparator))\n  }\n  console.log(view)\n}\n\nfunction printKeyboard(game: Game):Game{\n  let uK: string [][]\n  if(typeof game.keyboard === 'undefined'){\n    let tmp = keys.split('P')\n    tmp[0]+='P'\n    tmp = tmp.concat(tmp[1].split('L'))\n    tmp.splice(1,1)\n    tmp[1]+='L '\n    tmp[2]=' '+tmp[2]+'  '\n    uK = tmp.map(row => row.split(''))\n  } else {\n    uK = [...game.keyboard]\n  }\n  printGrid(uK)\n  return updateKeyboard(game, uK)\n}\n\nfunction paintWord(word: string, game: Game): Game{\n  if(word !== game.answer){\n    /*We need to handle cases in which either the answer or the word have duplicate characters. There are four possible cases, either the answer has/hasn't duplicates and/or the word has/hasn't duplicates. We need only to handle the case in which the answer has no duplicate while the word has some, because the other cases are automatically handled by the default case*/\n    for(let idx = 0; idx<word.length; idx++){\n      let char = word.charAt(idx)\n      if(char===game.answer.charAt(idx)){ //key is in correct place\n        game = paintKeyboard(char,green,game)\n        game = paintGrid(char, green, game)\n        //paint the key in the gamegrid/keyboard green\n      } else {        \n        if(game.answer.includes(word.charAt(idx))){ //key is misplaced\n          if(count(word, char)>1){\n            let scoredWord: scoredChar[] = scoreWord(word, game)\n            if(idx !== maxScorePos(char, scoredWord)-1){\n              game = paintKeyboard(char,green,game)\n              game = paintGrid(char,reset,game)\n            } \n          } else {\n            game = paintKeyboard(char,green,game)\n            game = paintGrid(char,yellow,game)\n            //paint the key in the gamegrid/keyboard yellow\n          }\n        } else { //key is not included\n          //paint the remaining keys red on the keyboard\n          game = paintKeyboard(char,red,game)\n          }\n        }      \n      }\n    \n  } else {\n    for(let idx = 0; idx<word.length; idx++){\n      let char = word.charAt(idx)\n      game = paintKeyboard(char,green,game)\n      game = paintGrid(char, green, game)\n    }\n  }\n  return game\n}\n\nfunction scoreWord(word: string, game: Game): scoredChar[]{\n    let arr : scoredChar[] = new Array(word.length).fill(undefined)\n\n    for(let idx = 0; idx<word.length; idx++){\n        let char : scoredChar = {\n            char: word.charAt(idx),\n            score:0\n        }\n        char.repeated = count(word,char.char)>1\n    \n        if(game.answer.charAt(idx) === word.charAt(idx)){\n            char.score = 2\n        } else {\n            if(game.answer.includes(char.char)){\n            char.score = 1\n            }\n        }\n        arr.splice(idx,1,char)\n    }\n    return arr\n}\n\nfunction hasDoubles(word: string): boolean{\n  let lowercase: string = word.toLocaleLowerCase()\n  let set : Set<string> = new Set(lowercase)\n  if(lowercase.length === set.size){\n    return false\n  } else {\n    return true\n  }\n}\n\nfunction win(game: Game): Game{\n  let tmp: Game = {...game}\n  tmp.win = true\n  return Object.freeze(tmp)\n}\n\nfunction paintKeyboard(char: string, colour: string, game: Game): Game{\n  let tmp = {...game}\n  tmp.keyboard = paintK(char,tmp.keyboard as string[][],colour)\n  return Object.freeze(tmp)\n}\n\nfunction paintGrid(char: string, colour: string, game: Game): Game{\n  let tmp = {...game}\n  tmp.grid = paintG(char,tmp.grid as string [][],colour)\n  return Object.freeze(tmp)\n}\n\nfunction paintK(char: string, data: string[][], colour: string): string[][]{\n  let letter: string = char.toUpperCase()\n  let tmp : string[][] = [...data]\n  for(let idx = 0; idx<tmp.length;idx++){\n    let row = tmp[idx]\n    if(row.includes(letter)){\n      row[row.indexOf(letter)]= colour+letter+reset\n    }\n  }\n  return tmp\n}\n\nfunction paintG(char: string, data: string[][], colour: string): string[][]{\n  let tmp : string[][] = [...data]\n  for(let idx = 0; idx<tmp.length;idx++){\n    let row = tmp[idx]\n    if(typeof row !== 'undefined' && row.includes(char)){\n      row[row.indexOf(char)]= colour+char+reset\n    }\n  }\n  return tmp\n}\n\nfunction count(word: string, c: string): number { \n  var result = 0, i = 0;\n  for(i;i<word.length;i++)if(word[i]==c)result++;\n  return result;\n};\n\nfunction maxScorePos(char: string, scoredWord: scoredChar[]):number{\n    let maxScorePos = 0\n    for(let idx = 0; idx<scoredWord.length;idx++){\n        if(scoredWord[idx].char === char){\n            maxScorePos = idx\n        }\n    }\n    return maxScorePos+1\n}"],
  "mappings": "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",
  "names": []
}
