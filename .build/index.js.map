{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["// these are the two libraries we need\nimport prompt from 'prompt-sync'\nimport {readFileSync} from 'fs'\n\n// these are some codes to get the console to print in colors\n// see examples below\nconst Reset = \"\\x1b[0m\"\nconst BgRed = \"\\x1b[41m\"\nconst BgGreen = \"\\x1b[42m\"\nconst BgYellow = \"\\x1b[43m\"\nconst BgBlue = \"\\x1b[44m\"\nconst BgMagenta = \"\\x1b[45m\"\nconst BgCyan = \"\\x1b[46m\"\nconst BgWhite = \"\\x1b[47m\"\n\nconst input = prompt();\n\n/*\n// this is how we get data from the user\nconst yesOrNo = input('Want to see some colors (yes or no)?')\n\nif(yesOrNo === \"yes\") {\n  // this is how you could print in colors\n  console.log('|---|---|---|---|---|---|')\n  console.log(`|${BgYellow} W ${Reset}| O |${BgGreen} R ${Reset}| D |${BgYellow} L ${Reset}| E |`)\n  console.log('|---|---|---|---|---|---|')\n} else {\n  console.log(\"not a problem\")\n}*/\n\n// this is how to read data from the files\nconst answers:string[] = readFileSync('answers.txt', 'utf-8').split(\"\\n\")\nconst words: string[] = readFileSync('allwords.txt', 'utf-8').split(\"\\n\")\n\nlet hardMode: boolean = false\nlet message : string\n\n//Step 1: User chooses answer (not known) --> random?\n//Step 2: Setup game\n//Step 3: Play\n//Step 4: Win/Loss, add to stats\n\n\n// this is how to read an integer, if needed\n// but be careful about incorrect inputs \n\nreadInput()\n\n//reads input and filters if there \nfunction readInput (){\n  console.clear()\n  if(typeof message !== \"undefined\"){\n    console.log(message+'\\n')\n  }\n  console.log('Welcome! To choose an answer ')\n  console.log('or type QUIT to quit.')\n  const i = input(`enter a number between 0 and ${answers.length} : `)\n  if(isNaN(i)){\n    switch(i){\n        case \"QUIT\":{\n          console.clear()\n          break\n        }\n      case \"EASY\": {\n        if(hardMode){\n          message = 'Hard mode disabled.'\n          hardMode = false\n        } else {\n          message = 'Hard mode is already disabled!'\n        }\n        readInput()\n        break\n      }\n      case \"HARD\": {\n        if(!hardMode){\n          message = 'Hard mode enabled.'\n          hardMode = true\n        } else {\n          message = 'Hard mode is already enabled!'\n        }\n        readInput()\n        break\n      }\n      case \"HELP\": {\n        break\n      }\n      case \"STAT\": {\n        break\n      }\n        default:{\n          message = 'What you entered is not a number!\\nPlease try again!'\n          readInput()\n          break\n        }  \n    }\n  } else {\n    const n = parseInt(i)\n    if(i<0 || i> answers.length){\n      console.clear()\n      console.log('The number is out of the valid range!')\n      console.log('Please try again!\\n')\n      readInput()\n    } else {\n      console.log(`The word at index ${n} is ${words[n]}`)\n      console.log(`The answer word at index ${n} is ${answers[n]}`)\n      input(\"\\npress enter to restart\")\n      readInput()\n    }  \n  }\n}\n\n// feel free to delete all the starter you don't need after you understand how to use it.  \n// after this the program quits"],
  "mappings": ";;;;;;;;;;;;;;;;;;AACA,yBAAmB;AACnB,gBAA2B;AAI3B,MAAM,QAAQ;AACd,MAAM,QAAQ;AACd,MAAM,UAAU;AAChB,MAAM,WAAW;AACjB,MAAM,SAAS;AACf,MAAM,YAAY;AAClB,MAAM,SAAS;AACf,MAAM,UAAU;AAEhB,MAAM,QAAQ;AAgBd,MAAM,UAAmB,4BAAa,eAAe,SAAS,MAAM;AACpE,MAAM,QAAkB,4BAAa,gBAAgB,SAAS,MAAM;AAEpE,IAAI,WAAoB;AACxB,IAAI;AAWJ;AAGA,qBAAqB;AACnB,UAAQ;AACR,MAAG,OAAO,YAAY,aAAY;AAChC,YAAQ,IAAI,UAAQ;AAAA;AAEtB,UAAQ,IAAI;AACZ,UAAQ,IAAI;AACZ,QAAM,IAAI,MAAM,gCAAgC,QAAQ;AACxD,MAAG,MAAM,IAAG;AACV,YAAO;AAAA,WACE,QAAO;AACV,gBAAQ;AACR;AAAA;AAAA,WAEC,QAAQ;AACX,YAAG,UAAS;AACV,oBAAU;AACV,qBAAW;AAAA,eACN;AACL,oBAAU;AAAA;AAEZ;AACA;AAAA;AAAA,WAEG,QAAQ;AACX,YAAG,CAAC,UAAS;AACX,oBAAU;AACV,qBAAW;AAAA,eACN;AACL,oBAAU;AAAA;AAEZ;AACA;AAAA;AAAA,WAEG,QAAQ;AACX;AAAA;AAAA,WAEG,QAAQ;AACX;AAAA;AAAA,eAEQ;AACN,kBAAU;AACV;AACA;AAAA;AAAA;AAAA,SAGD;AACL,UAAM,IAAI,SAAS;AACnB,QAAG,IAAE,KAAK,IAAG,QAAQ,QAAO;AAC1B,cAAQ;AACR,cAAQ,IAAI;AACZ,cAAQ,IAAI;AACZ;AAAA,WACK;AACL,cAAQ,IAAI,qBAAqB,QAAQ,MAAM;AAC/C,cAAQ,IAAI,4BAA4B,QAAQ,QAAQ;AACxD,YAAM;AACN;AAAA;AAAA;AAAA;",
  "names": []
}
