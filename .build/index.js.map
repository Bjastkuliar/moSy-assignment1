{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["// these are the two libraries we need\nimport prompt from 'prompt-sync'\nimport {readFileSync} from 'fs'\n\n// these are some codes to get the console to print in colors\n// see examples below\nconst Reset = \"\\x1b[0m\"\nconst BgRed = \"\\x1b[41m\"\nconst BgGreen = \"\\x1b[42m\"\nconst BgYellow = \"\\x1b[43m\"\nconst BgBlue = \"\\x1b[44m\"\nconst BgMagenta = \"\\x1b[45m\"\nconst BgCyan = \"\\x1b[46m\"\nconst BgWhite = \"\\x1b[47m\"\n\nconst input = prompt();\n\n/*\n// this is how we get data from the user\nconst yesOrNo = input('Want to see some colors (yes or no)?')\n\nif(yesOrNo === \"yes\") {\n  // this is how you could print in colors\n  console.log('|---|---|---|---|---|---|')\n  console.log(`|${BgYellow} W ${Reset}| O |${BgGreen} R ${Reset}| D |${BgYellow} L ${Reset}| E |`)\n  console.log('|---|---|---|---|---|---|')\n} else {\n  console.log(\"not a problem\")\n}*/\n\n// this is how to read data from the files\nconst answers:string[] = readFileSync('answers.txt', 'utf-8').split(\"\\n\")\nconst words: string[] = readFileSync('allwords.txt', 'utf-8').split(\"\\n\")\n\n//Step 1: User chooses answer (not known) --> random?\n//Step 2: Setup game\n//Step 3: Play\n//Step 4: Win/Loss, add to stats\n\n\n// this is how to read an integer, if needed\n// but be careful about incorrect inputs \nconsole.log('Welcome! To choose an answer ')\nconst i = input(`enter a number between 0 and ${answers.length} :  `)\nif(isNaN(i)){\n  console.log('What you entered is not a number!')\n} else {\n  const n = parseInt(i)\n  if(i<0 || i> answers.length){\n    console.log('The number is out of the valid range!')\n  } else {\n    console.log(`The word at index ${n} is ${words[n]}`)\n    console.log(`The answer word at index ${n} is ${answers[n]}`)\n  }  \n}\n\n\n// this is how to clear the console\ninput(\"press enter to clear the console\")\nconsole.clear()\n\n// feel free to delete all the starter you don't need after you understand how to use it.  \n// after this the program quits"],
  "mappings": ";;;;;;;;;;;;;;;;;;AACA,yBAAmB;AACnB,gBAA2B;AAI3B,MAAM,QAAQ;AACd,MAAM,QAAQ;AACd,MAAM,UAAU;AAChB,MAAM,WAAW;AACjB,MAAM,SAAS;AACf,MAAM,YAAY;AAClB,MAAM,SAAS;AACf,MAAM,UAAU;AAEhB,MAAM,QAAQ;AAgBd,MAAM,UAAmB,4BAAa,eAAe,SAAS,MAAM;AACpE,MAAM,QAAkB,4BAAa,gBAAgB,SAAS,MAAM;AAUpE,QAAQ,IAAI;AACZ,MAAM,IAAI,MAAM,gCAAgC,QAAQ;AACxD,IAAG,MAAM,IAAG;AACV,UAAQ,IAAI;AAAA,OACP;AACL,QAAM,IAAI,SAAS;AACnB,MAAG,IAAE,KAAK,IAAG,QAAQ,QAAO;AAC1B,YAAQ,IAAI;AAAA,SACP;AACL,YAAQ,IAAI,qBAAqB,QAAQ,MAAM;AAC/C,YAAQ,IAAI,4BAA4B,QAAQ,QAAQ;AAAA;AAAA;AAM5D,MAAM;AACN,QAAQ;",
  "names": []
}
