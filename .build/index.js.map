{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["// these are the two libraries we need\nimport prompt from 'prompt-sync'\nimport {readFileSync} from 'fs'\n\n// these are some codes to get the console to print in colors\n// see examples below\nconst rs = \"\\x1b[0m\"\nconst re = \"\\x1b[41m\"\nconst gr = \"\\x1b[42m\"\nconst ye = \"\\x1b[43m\"\nconst bl = \"\\x1b[44m\"\nconst ma = \"\\x1b[45m\"\nconst cy = \"\\x1b[46m\"\nconst wh = \"\\x1b[47m\"\n\nconst input = prompt();\n\n// this is how to read data from the files\nconst answers:string[] = readFileSync('answers.txt', 'utf-8').split(\"\\n\")\nconst words: string[] = readFileSync('allwords.txt', 'utf-8').split(\"\\n\")\n\nconst rowSeparator: string = '|---|---|---|---|---|'\nconst keySeparator: string = '|---|---|---|---|---|---|---|---|---|---|'\nconst rowEmpty: string = '|   |   |   |   |   |'\n\nconst keys: string = 'QWERTYUIOPASDFGHJKLZXCVBNM'\n\ninterface Settings{\n  msg: string,\n  keepPlaying?: boolean,\n  wins?: number,\n  losses?: number,\n  hardMode?: boolean\n  }\n\ninterface Game{\n  msg?: string,\n  grid?: string[][],\n  keyboard?: string[][],\n  answer?: string,\n  round?: number,\n  win?: boolean,\n  inGame?: boolean\n  }\n\nmainMenu()\n\nfunction setMessage (settings: Settings, message: string): Settings{\n  let tmp = {...settings}\n  tmp.msg = message\n  return Object.freeze(tmp)\n}\n\n  function setGameMessage (settings: Game, message: string): Game{\n  let tmp = {...settings}\n  tmp.msg = message\n  return Object.freeze(tmp) \n}\n\nfunction setMode(settings: Settings, mode: boolean): Settings{\n  let tmp = {...settings}\n  tmp.hardMode = mode\n  return Object.freeze(tmp)\n}\n\nfunction playMore (settings: Settings, answer: boolean): Settings{\n  let tmp = {...settings}\n  tmp.keepPlaying = answer\n  return Object.freeze(tmp)\n}\n\n/*starts the game by reading input and filtering \nif there are commands. Needed in order to handle \neach possible case of the input function*/\nfunction mainMenu (settings : Settings = {\n  msg : 'Welcome', \n  keepPlaying : true,\n  wins: 0,\n  losses: 0\n} ){\n  while(settings.keepPlaying){\n    showMessage(settings.msg)\n    const i = input(`enter a number between 0 and ${answers.length}: `)\n    settings = processString(i, settings) as Settings\n  }\n}\n\n/*prints the message according to whether it is the\nstartup, the main menu or in-game*/\nfunction showMessage(message : string, inGame : boolean = false){\n  //console.clear()\n  console.log(message+'\\n')\n    if(!inGame){\n      console.log('Type HELP to list all the commands\\nor type QUIT to quit.\\nTo choose an answer ')\n    }\n}\n\n/*Processes the input, by sorting it between words, commands or numbers. If it does not fall within these categories it is treated as invalid input*/\nfunction processString(word: string, data: Settings|Game):Settings|Game{\n  switch(word.length){\n       /*this case can be accessed in 2 contexts, if we are in the main menu we need to signal an error, if we are in a game we have to validate the input word*/\n    case 5:{\n      //distinguish between game and settings\n      if(data.hasOwnProperty('answer')){\n        //we are in a game\n        return data as Game\n      } else {\n        return setMessage(data as Settings,'Game has not started yet!\\nEnter a number to start a game.')\n      }\n    }\n    case 4:{\n      //it's a command\n      if(data.hasOwnProperty('answer')){\n        //we are in a game\n        //quit the game and reopen the main menu\n        return data as Game\n      } else {\n        return processCommand(word,data as Settings)\n      }\n    }\n    case 1:{\n      //it's a number\n       if(data.hasOwnProperty('answer')){\n        //we are in a game\n        //quit the game and reopen main menu\n        return data\n      } else {\n        return processNumber(word,data as Settings)\n      }\n    }\n    default:{\n      return setMessage(data as Settings, 'Invalid input, please try again!')\n    }\n  }\n}\n\n/*process any given word in instructions,\nprovided that it is valid. Otherwise returns\nan invalid input message*/\nfunction processCommand(input: string, settings: Settings): Settings{\n  console.clear()\n  switch(input){\n      case \"QUIT\":{\n        console.clear()\n        return playMore(settings,false)\n      }\n        //both cases either switch the mode or do nothing\n      case \"EASY\": {\n        if(settings.hardMode){\n          settings = setMessage(settings,'Hard mode disabled!')\n          return setMode(settings, false)\n        } else {\n          return setMessage(settings,'Hard mode is already disabled!')\n        }\n      }\n      case \"HARD\": {\n        if(!settings.hardMode){\n          settings = setMessage(settings,'Hard mode enabled.')\n          return setMode(settings,true)\n        } else {\n          return setMessage(settings,'Hard mode is already enabled!')\n        }\n      }\n        //prints the command list\n      case \"HELP\": {\n        return setMessage(settings,'The available commands are:\\nHELP       shows this list\\nEASY/HARD  switches between easy and hard mode\\nSTAT       prints the statistics\\nQUIT       exits the game')\n      }\n      case \"STAT\": {\n        return setMessage(settings, `Current statistics:\\n\\n${settings.wins}  games won\\n${settings.losses}  games lost`)\n      }\n    default:{\n          return setMessage(settings, 'Invalid command, please try again!')\n      }  \n    }\n}\n\n/*process any single character word,\nprovided that it is a number, \nif so starts a new game. Otherwise returns\nan invalid input message*/\nfunction processNumber(word: string,settings: Settings):Settings{\n  let i: number = parseInt(word)\n  if(isNaN(i)){\n    return setMessage(settings,'Invalid input, please try again!')\n  } else {\n    let game: Game = {\n      answer : answers[i],\n      inGame: true,\n      win: false,\n      round: 0\n    }\n    return newGame(settings,game)\n  }\n}\n\nfunction setWin(settings: Settings): Settings{\n  let tmp = {...settings}\n  if(typeof tmp.wins === 'undefined'){\n    tmp.wins = 1\n  } else {\n    tmp.wins++\n  }\n  return Object.freeze(tmp)\n}\n\nfunction setLoss(settings: Settings): Settings{\n  let tmp = {...settings}\n  if(typeof tmp.losses === 'undefined'){\n    tmp.losses = 1\n  } else {\n    tmp.losses++\n  }\n  return Object.freeze(tmp)\n}\n\nfunction newGame(settings: Settings, game: Game): Settings {\n  const outcome: boolean|undefined = playGame(game)\n  if(typeof outcome !== 'undefined'){\n    if(outcome){\n    settings = setMessage(settings, 'You Won!')\n    settings = setWin(settings)\n    } else {\n      settings = setMessage(settings, `You Lost! The answer was ${game.answer}`)\n      settings = setLoss(settings)\n    }\n  }\n  \n  game = {}\n  return settings\n}\n\nfunction nextRound(game: Game):Game{\n  let tmp = {...game}\n  tmp.round++\n  return Object.freeze(tmp)\n}\n\nfunction updateGrid(game: Game, grid: string[][]):Game{\n  let tmp = {...game}\n  tmp.grid = grid\n  return Object.freeze(tmp)\n}\n\nfunction updateKeyboard(game: Game, keyboard: string[][]):Game{\n  let tmp = {...game}\n  tmp.keyboard = keyboard\n  return Object.freeze(tmp)\n}\n\nfunction playGame(game : Game): boolean|undefined{\n  while(game.round<6){\n    showMessage(game.msg as string)\n    printGrid(game.grid as string[][])\n    game = printKeyboard(game)\n    input()\n    //validate the word\n    game = nextRound(game)\n    if(game.win){\n      return true\n    } else {\n      return false\n    }\n  }\n  return undefined\n}\n\n/*inserts the word in the game-grid if the\ngame has started and it is valid, otherwise sends a warning.*/\nfunction processWord(input: string, game: Game) {\n  if(words.includes(input)){\n      //fillGrid(input)\n    } else {\n      return setGameMessage(game,'Word does not figure among those valid!')\n    }\n}\n\nfunction fillGrid(word: string) {\n  const wordArray: string[] = Array.from(word)\n  game[round-1]= wordArray\n  printGrid()\n}\n\n/*converts any provided array of strings into the\nprintable table format*/\nfunction convertRow(gameRow : string[], separator: string): string {\n  if(typeof gameRow !== 'undefined'){\n    let gridRow: string = \"| \"\n    gameRow.map(element=> gridRow+=element+ \" | \")\n    return gridRow + '\\n' + separator + '\\n'\n  } else {\n    return rowEmpty + '\\n' + separator + '\\n'\n  }\n}\n\nfunction printGrid(grid: string[][]) {\n  let view: string = ''\n  if(typeof grid === 'undefined'){\n    grid = new Array(6).fill(undefined)\n  }\n  if(grid.length === 3){\n    view+=keySeparator+'\\n'\n    grid.map(row=> view+=convertRow(row, keySeparator))\n  } else {\n    view+=rowSeparator+'\\n'\n    grid.map(row=> view+=convertRow(row, rowSeparator))\n  }\n  \n  console.log(view)\n}\n\n\n\nfunction printKeyboard(game: Game, keyboard: string[][]|undefined = undefined):Game{\n  let uK: string [][] = new Array(3)\n  if(typeof keyboard === 'undefined'){\n    let tmp = keys.split('P')\n    tmp[0]+='P'\n    tmp = tmp.concat(tmp[1].split('L'))\n    tmp.splice(1,1)\n    tmp[1]+='L '\n    tmp[2]=' '+tmp[2]+'  '\n    \n    uK = tmp.map(row => row.split(''))\n  } else {\n    uK = {...keyboard}\n  }\n  printGrid(uK)\n  return updateKeyboard(game, uK)\n}\n\nfunction exists(array: any[]):boolean{\n  if(typeof array != \"undefined\" && array != null && array.length != null && array.length > 0){\n    return true\n  }\n  return false\n}"],
  "mappings": "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",
  "names": []
}
