{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["// these are the two libraries we need\nimport prompt from 'prompt-sync'\nimport {readFileSync} from 'fs'\n\n// these are some codes to get the console to print in colors\n// see examples below\nconst rs = \"\\x1b[0m\"\nconst re = \"\\x1b[41m\"\nconst gr = \"\\x1b[42m\"\nconst ye = \"\\x1b[43m\"\nconst bl = \"\\x1b[44m\"\nconst ma = \"\\x1b[45m\"\nconst cy = \"\\x1b[46m\"\nconst wh = \"\\x1b[47m\"\n\nconst input = prompt();\n\n// this is how to read data from the files\nconst answers:string[] = readFileSync('answers.txt', 'utf-8').split(\"\\n\")\nconst words: string[] = readFileSync('allwords.txt', 'utf-8').split(\"\\n\")\n\nconst rowSeparator: string = '|---|---|---|---|---|'\nconst rowEmpty: string = '|   |   |   |   |   |'\n\nconst keys: string = 'QWERTYUIOPASDFGHJKLZXCVBNM'\n\nconst settingsTemplate: object = Object.freeze(\n    {\n      msg : 'Welcome',\n      keepPlaying : true,\n      wins : 0,\n      losses: 0,\n      hardMode: false\n    }\n  )\n\nconst gameTemplate: object = Object.freeze(\n  {\n    msg: '',\n    grid: [],\n    keyboard: [],\n    answer: '',\n    round : 0,\n    win: false\n  }\n)\n\nmainMenu()\n\nfunction setMessage (settings: object, message: string): object{\n  let tmp = {...settings}\n  tmp.msg = message\n  return Object.freeze(tmp)\n}\n\nfunction setMode(settings: object, mode: boolean): object{\n  let tmp = {...settings}\n  tmp.hardMode = mode\n  return Object.freeze(tmp)\n}\n\nfunction playMore (settings: object, answer: boolean): object{\n  let tmp = {...settings}\n  tmp.keepPlaying = answer\n  return Object.freeze(tmp)\n}\n\n/*starts the game by reading input and filtering \nif there are commands. Needed in order to handle \neach possible case of the input function*/\nfunction mainMenu (settings : object = Object.freeze({...settingsTemplate})){\n  while(settings.keepPlaying){\n    showMessage(settings.msg)\n    const i = input(`enter a number between 0 and ${answers.length}: `)\n    settings = processString(i, settings)\n  }\n}\n\n/*prints the message according to whether it is the\nstartup, the main menu or in-game*/\nfunction showMessage(message : string, inGame : boolean = false){\n  //console.clear()\n  console.log(message+'\\n')\n    if(!inGame){\n      console.log('Type HELP to list all the commands\\nor type QUIT to quit.\\nTo choose an answer ')\n    }\n}\n\n/*Processes the input, by sorting it between words, commands or numbers. If it does not fall within these categories it is treated as invalid input*/\nfunction processString(word: string, data: object|undefined):object{\n  switch(word.length){\n       /*this case can be accessed in 2 contexts, if we are in the main menu we need to signal an error, if we are in a game we have to validate the input word*/\n    case 5:{\n      //distinguish between game and settings\n      if(Object.hasOwn(data,'answer')){\n        //we are in a game\n        return data\n      } else {\n        return setMessage(data,'Game has not started yet!\\nEnter a number to start a game.')\n      }\n    }\n    case 4:{\n      //it's a command\n      if(Object.hasOwn(data,'answer')){\n        //we are in a game\n        //quit the game and reopen the main menu\n        return data\n      } else {\n        return processCommand(word,data)\n      }\n    }\n    case 1:{\n      //it's a number\n       if(Object.hasOwn(data,'answer')){\n        //we are in a game\n        //quit the game and reopen main menu\n        return data\n      } else {\n        return processNumber(word,data)\n      }\n    }\n    default:{\n      return setMessage(data, 'Invalid input, please try again!')\n    }\n  }\n}\n\n/*process any given word in instructions,\nprovided that it is valid. Otherwise returns\nan invalid input message*/\nfunction processCommand(input: string, settings: object, game : object|undefined): object{\n  console.clear()\n  switch(input){\n      case \"QUIT\":{\n        console.clear()\n        return playMore(settings,false)\n      }\n        //both cases either switch the mode or do nothing\n      case \"EASY\": {\n        if(settings.hardMode){\n          settings = setMessage(settings,'Hard mode disabled!')\n          return setMode(settings, false)\n        } else {\n          return setMessage(settings,'Hard mode is already disabled!')\n        }\n      }\n      case \"HARD\": {\n        if(!settings.hardMode){\n          settings = setMessage(settings,'Hard mode enabled.')\n          return setMode(settings,true)\n        } else {\n          return setMessage(settings,'Hard mode is already enabled!')\n        }\n      }\n        //prints the command list\n      case \"HELP\": {\n        return setMessage(settings,'The available commands are:\\nHELP       shows this list\\nEASY/HARD  switches between easy and hard mode\\nSTAT       prints the statistics\\nQUIT       exits the game')\n      }\n      case \"STAT\": {\n        return setMessage(settings, `Current statistics:\\n\\n${settings.wins}  games won\\n${settings.losses}  games lost`)\n      }\n    default:{\n          return setMessage(settings, 'Invalid command, please try again!')\n      }  \n    }\n}\n\n/*process any single character word,\nprovided that it is a number, \nif so starts a new game. Otherwise returns\nan invalid input message*/\nfunction processNumber(word: string,settings: object):object{\n  let i: number = parseInt(word)\n  if(isNaN(i)){\n    return setMessage(settings,'Invalid input, please try again!')\n  } else {\n    let game: object|undefined = {...gameTemplate}\n    game = setAnswer(game, answers[i])\n    return newGame(settings,game)\n  }\n}\n\nfunction setAnswer(game: object, answer: string): object{\n  let tmp = {...game}\n  tmp.answer = answer\n  return Object.freeze(tmp)\n}\n\nfunction setWin(settings: object): object{\n  let tmp = {...settings}\n  tmp.wins++\n  return Object.freeze(tmp)\n}\n\nfunction setLoss(settings: object): object{\n  let tmp = {...settings}\n  tmp.losses++\n  return Object.freeze(tmp)\n}\n\nfunction newGame(settings: object, game: object|undefined): object {\n  const outcome: boolean|undefined = playGame(game)\n  if(typeof outcome !== 'undefined'){\n    if(outcome){\n    settings = setMessage(settings, 'You Won!')\n    settings = setWin(settings)\n    } else {\n      settings = setMessage(settings, `You Lost! The answer was ${game.answer}`)\n      settings = setLoss(settings)\n    }\n  }\n  \n  game = undefined\n  return settings\n}\n\nfunction nextRound(game: object):object{\n  let tmp = {...game}\n  tmp.round++\n  return Object.freeze(tmp)\n}\n\nfunction updateGrid(game: object, grid: string[][]):object{\n  let tmp = {...game}\n  tmp.grid = grid\n  return Object.freeze(tmp)\n}\n\nfunction updateKeyboard(game: object, keyboard: string[][]):object{\n  let tmp = {...game}\n  tmp.keyboard = keyboard\n  return Object.freeze(tmp)\n}\n\nfunction playGame(game : object): boolean|undefined{\n  while(game.round<6){\n    showMessage(game.msg)\n    printGrid(game.grid)\n    game = printKeyboard(game)\n    input()\n    //validate the word\n    game = nextRound(game)\n    if(game.win){\n      return true\n    } else {\n      return false\n    }\n  }\n  return undefined\n}\n\n/*inserts the word in the game-grid if the\ngame has started and it is valid, otherwise sends a warning.*/\nfunction processWord(input: string, game: object) {\n  if(words.includes(input)){\n      //fillGrid(input)\n    } else {\n      return setMessage(game,'Word does not figure among those valid!')\n    }\n}\n\nfunction fillGrid(word: string) {\n  const wordArray: string[] = Array.from(word)\n  game[round-1]= wordArray\n  printGrid()\n}\n\n/*converts any provided array of strings into the\nprintable table format*/\nfunction convertRow(gameRow : string[]): string {\n  if(typeof gameRow !== 'undefined'){\n    let gridRow: string = \"| \"\n    for (let index = 0; index < gameRow.length; index++) {\n      gridRow = gridRow + gameRow[index]+ \" | \"\n    }\n    return gridRow + '\\n' + rowSeparator + '\\n'\n  } else {\n    return rowEmpty + '\\n' + rowSeparator + '\\n'\n  }\n}\n\nfunction printGrid(grid: string[][]) {\n  let view: string = rowSeparator+'\\n'\n  for (let index = 0; index < 6; index++) {\n    view = view + convertRow(grid[index])\n  }\n  console.log(view)\n}\n\n\n\nfunction printKeyboard(game: object, keyboard: string[][]):object{\n  let uK: string [][] = new Array(3)\n  if(typeof keyboard !== 'object'){\n    let tmp = keys.split('P')\n    tmp[0]+='P'\n    tmp = tmp.concat(tmp[1].split('L'))\n    tmp.splice(1,1)\n    tmp[1]+='L'\n    uK = tmp.map(row => row.split(''))\n    console.log(uK)\n  }\n  return updateKeyboard(game, uK)\n}"],
  "mappings": "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",
  "names": []
}
